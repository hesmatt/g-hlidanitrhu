<link href="{{ asset('bundles/sygrid/assets/css/gridjs.css') }}" rel="stylesheet"/>
{% if customStyle is not null %}
    <link href="{{ customStyle | raw }}" rel="stylesheet"/>
{% endif %}

<div id="{{ gridId }}"></div>

<script src="{{ asset('bundles/sygrid/assets/js/gridjs.js') }}"></script>
<script>
    {% if language is not same as null %}
    {% set translations = language.getTranslations() %}
    {% else %}
    {% set translations = null %}
    {% endif %}

    const {{ variableName | raw }} =
    new gridjs.Grid({
        columns: [
            {% for column in columns %}
            {
                name: '{{ (column.getTitle() ?? column.getKey()) | trans }}',
                {% if column.getFormatter() is not same as null %}
                formatter: {{ column.getFormatter().getCallback() | raw }}
                {% endif %}

            },
            {% endfor %}
            {% for action, settings in actions %}
            {
                name: '{{ translations.actions.name ?? 'Actions' }}',
                formatter: {{ settings.formatter | raw }}
            },
            {% endfor %}
        ],
        {% if search %}
        search: {
            server: {
                url: (prev, keyword) => `${prev}&search=${keyword}`
            }
        },
        {% endif %}
        {% if paging %}
        pagination: {
            enabled: true,
            limit: {{ limit }},
            server: {
                url: (prev, page, limit) => `${prev}&limit=${limit}&offset=${page * limit}`
            }
        },
        {% endif %}
        {% if serverUrl is not same as null %}
        server: {
            url: '{{ serverUrl | raw }}',
            then: data => data.results.map(result => {
                return [
                    {% for column in columns %}
                    result.{{ column.getKey() }},
                    {% endfor %}
                ];
            }),
            total: data => data.count
        },
        {% endif %}
        {% if translations is not same as null %}
        language: {
            search: {
                placeholder: '{{ translations.search.placeholder }}'
            },
            sort: {
                sortAsc: '{{ translations.sort.sortAsc }}',
                sortDesc: '{{ translations.sort.sortDesc }}',
            },
            pagination: {
                previous: '{{ translations.pagination.previous }}',
                next: '{{ translations.pagination.next }}',
                navigate: (page, pages) => `{{ translations.pagination.navigate | raw }}`,
                page: (page) => `{{ translations.pagination.page | raw }}`,
                showing: '{{ translations.pagination.showing }}',
                of: '{{ translations.pagination.of }}',
                to: '{{ translations.pagination.to }}',
                results: '{{ translations.pagination.results }}',
            },
            loading: '{{ translations.loading }}',
            noRecordsFound: '{{ translations.noRecordsFound }}',
            error: '{{ translations.error }}',
        }
        {% endif %}
    }).render(document.getElementById("{{ gridId }}"));
</script>